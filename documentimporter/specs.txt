The document importer should be able to do the followings:
- to import any kind of documents (any format, any size) to a documents repository;
- the documents repository can be of any brand (Documentum, Alfresco, OpenText, FileNet, Wordpress, etc.).
- in case a document already exists, to decide what to do with that document: replace the existing one, skip(ignore), create a new version of it. The criteria of check for the existing one should be also configurable (define the criteria);
- ability to create documents version tree.
- the progress of the importing will be logged into a separate file and console. The errors will be logged into a different log file. A csv file will be created in the end specifying the status for each of the imported document and also its size in bytes.
- the importer must be platform independent.
- the documents to import will be specified into an CSV file where on the first line must be defined the list of attributes of a document.
The values are delimited by commas, the values containing comma character must be enclosed within double quotes.
The order of attributes doesn't matter and at least one attribute must be specified. Some of the attributes must have specific names like:
$CONTENT_SYSTEM_PATH - for the document content. In case is missing it will be skipped.
$DOCUMENT_TYPE - for document type. In case is missing, a default will be used.
$DUPLICATE_SEARCH_CRITERIA - to search for duplicates. The value is a free text, representing a specific query to search by some attributes.
Example:dm_document where r_object_id=$r_object_id. <document type> where <attribute_name>=$<attribute_name>
-in case of repeating values they will be delimited by ; character and included inside double quotes.
- the targeted repository credentials MUST be provided only in command line (NEVER stored them).
- NICE TO HAVE: graphical user interface


- to have a configuration properties file with the following properties:
#Action to take in case a document is already exists.The values can be: VERSION, REPLACE, NEW, IGNORE, UPDATE
importer.action.in.case.exists=VERSION
#Folder path containing the documents that should be imported
importer.input.doc.folder=c:/input
#The name of the xlsx file containing the xlsx with the documents metadata. The document must have on the first line the specified columns names from above
importer.input.doc.name=documents_metadata.xlsx
#The importing can be also executed in parallel by specifying the number of importers threads.Default is 1
importer.no.of.importing.threads=1
#ID field name. Identifies uniquely a document into repository (e.g. version id)
document_id=object_id
#Repository brand: can be DOCUMENTUM, ALFRESCO, etc.
importer.repository=DOCUMENTUM
#Ignored document attributes names
IGNORED_ATTRIBUTES_NAMES=r_object_id


Technical details:
- use Java 1.8 or higher to implement
- develop the application using TDD principles
- for each repository brand should be a specific "connector", that will leverage the communication between the importer and the repository. The importer application should be able based on the "importer.repository" property to load the repository connector at runtime. The repository connector is packed as a jar file and must have a well defined name: <importer.repository>_connector.jar (e.g. documentum_connector.jar). It must be also in the classpath of the importer tool.